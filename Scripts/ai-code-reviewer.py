import os
import requests
from openai import OpenAI

# Environment Variables
github_token = os.environ["GITHUB_TOKEN"]
openai_model = os.environ.get("OPENAI_MODEL", "gpt-4")
repo = os.environ["GITHUB_REPOSITORY"]
pr_number = os.environ["PR_NUMBER"]

# Remove proxies if present (fixes httpx client injection bug)
os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)

client = OpenAI()

headers = {
    "Authorization": f"token {github_token}",
    "Accept": "application/vnd.github+json"
}

def get_pr_files_and_diff():
    pr_url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
    files_url = f"{pr_url}/files"

    pr_data = requests.get(pr_url, headers=headers).json()
    comments_url = pr_data["comments_url"]

    files_data = requests.get(files_url, headers=headers).json()
    file_diffs = []

    for file in files_data:
        if "patch" in file:
            file_diffs.append({
                "filename": file["filename"],
                "patch": file["patch"]
            })

    return file_diffs, comments_url

def build_openai_prompt(file_diffs):
    prompt = "You're reviewing a Swift 6 + SwiftUI PR. Provide a concise summary and inline review suggestions.\n\n"
    full_patch = ""
    for file in file_diffs:
        full_patch += f"\nFile: {file['filename']}\n{file['patch']}\n"
    prompt += full_patch
    return [
        {"role": "system", "content": "You are a senior iOS engineer."},
        {"role": "user", "content": prompt}
    ]

def parse_openai_response(text):
    lines = text.splitlines()
    summary_lines = []
    comments = []
    in_inline = False

    for line in lines:
        if line.strip().lower().startswith("inline:"):
            in_inline = True
            continue
        if not in_inline:
            summary_lines.append(line)
        elif ":" in line:
            parts = line.split(":", 2)
            if len(parts) == 3:
                try:
                    filename, lineno, comment = parts
                    comments.append({
                        "path": filename.strip(),
                        "line": int(lineno.strip()),
                        "body": comment.strip(),
                        "side": "RIGHT"
                    })
                except ValueError:
                    continue  # skip bad lines
    summary = "\n".join(summary_lines).strip()
    return summary, comments

def post_review(summary, inline_comments):
    url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/reviews"
    review_body = {
        "body": summary + "\n\n_This review was generated by an AI assistant._",
        "event": "COMMENT",
        "comments": inline_comments
    }
    response = requests.post(url, headers=headers, json=review_body)
    if response.status_code >= 300:
        raise Exception(f"Failed to post review: {response.text}")
    print("✅ Review posted with summary and inline comments.")

def main():
    print("🔍 Fetching PR changes...")
    file_diffs, _ = get_pr_files_and_diff()

    print("🧠 Sending diff to OpenAI...")
    messages = build_openai_prompt(file_diffs)

    response = client.chat.completions.create(
        model=openai_model,
        messages=messages,
        temperature=0.3
    )
    response_text = response.choices[0].message.content.strip()

    print("🧾 Parsing AI response...")
    summary, inline_comments = parse_openai_response(response_text)

    print("💬 Posting review...")
    post_review(summary, inline_comments)

if __name__ == "__main__":
    main()
